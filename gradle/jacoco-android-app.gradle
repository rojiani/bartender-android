/**************************************************************************************************
 * Gradle JaCoCo Plugin:
 * https://docs.gradle.org/current/userguide/jacoco_plugin.html
 **************************************************************************************************/
apply plugin: 'jacoco'

jacoco {
    toolVersion = jacoco_version
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

def androidFileFilter = [
    // data binding
    'android/databinding/**/*.class',
    '**/android/databinding/*Binding.class',
    '**/android/databinding/*',
    '**/androidx/databinding/*',
    '**/databinding/*',
    '**/BR.*',
    // android
    '**/R.class',
    '**/R$*.class',
    '**/BuildConfig.*',
    '**/Manifest*.*',
    '**/*Test*.*',
    'android/**/*.*',
    // dagger
    '**/*_MembersInjector.class',
    '**/Dagger*Component.class',
    '**/Dagger*Component$Builder.class',
    '**/Dagger*Subcomponent*.class',
    '**/*Subcomponent$Builder.class',
    '**/*Module_*Factory.class',
    '**/di/module/*',
    '**/*_Factory*.*',
    '**/*Module*.*',
    '**/*Dagger*.*',
    '**/*Hilt*.*',
    // Exclude Hilt generated classes
    '**/*Hilt*.*',
    'hilt_aggregated_deps/**',
    '**/*_Factory.class',
    '**/*_MembersInjector.class',
    // kotlin
    '**/*MapperImpl*.*',
    '**/*$ViewInjector*.*',
    '**/*$ViewBinder*.*',
    '**/BuildConfig.*',
    '**/*Component*.*',
    '**/*BR*.*',
    '**/Manifest*.*',
    '**/*$Lambda$*.*',
    '**/*Companion*.*',
    '**/*Module*.*',
    '**/*Dagger*.*',
    '**/*Hilt*.*',
    '**/*MembersInjector*.*',
    '**/*_MembersInjector.class',
    '**/*_Factory*.*',
    '**/*_Provide*Factory*.*',
    '**/*Extensions*.*',
    // sealed and data classes
    '**/*$Result.*',
    '**/*$Result$*.*',
    // adapters generated by moshi
    '**/*JsonAdapter.*',
    // @Parcelize
    '**/*$Parcelable*.*',
    // SafeArgs/Fragment/Navigation
    '**/*FragmentDirection*.*',
    '**/*FragmentArgs*.*',
]

def javaClasses = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: androidFileFilter)
def kotlinClasses = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: androidFileFilter)
def debugTree = kotlinClasses


// Merge src/test and src/androidTest (Instrumentation unit tests)
// into a single coverage report.
def mergedUnitTestExecutionData = fileTree(dir: project.buildDir, includes: [
    'jacoco/testDebugUnitTest.exec',
    'outputs/code_coverage/debugAndroidTest/connected/*.ec'
])

task jacocoTestReport(type: JacocoReport, dependsOn: [
    "testDebugUnitTest",
    "connectedDebugAndroidTest"
]) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build unit tests (Local & Instrumented)"

    reports {
        xml.enabled true
        html {
            enabled true
            file("$buildDir/reports/coverage")
        }
    }

    classDirectories.from = [debugTree]
    sourceDirectories.from = files([
        android.sourceSets.main.java.srcDirs
    ])
    executionData.from = mergedUnitTestExecutionData
}

tasks.create(name: "jacocoTestCoverageVerification", type: JacocoCoverageVerification, dependsOn: "jacocoTestReport") {
    classDirectories.from = [debugTree]
    sourceDirectories.from = files([
        android.sourceSets.main.java.srcDirs
    ])
    executionData.from = mergedUnitTestExecutionData

    violationRules {
        // No longer accurately collecting coverage data...
        // possibly related to changes with Android Gradle Plugin >= 4.2.0 ?
        enabled = false
        rule {
            limit {
                counter = 'LINE'
                minimum = 0.87
            }
            limit {
                counter = 'BRANCH'

                // TODO: increase to 65%
                minimum = 0.55
            }
        }
    }
}

task openCoverageReport(type: Exec) {
    group = "Reporting"
    description = "Open the Jacoco Test report in the default browser"
    commandLine "open", "$buildDir/reports/jacoco/jacocoTestReport/html/index.html"
}

afterEvaluate {
    jacocoTestCoverageVerification.dependsOn jacocoTestReport
    check.dependsOn jacocoTestCoverageVerification
}

